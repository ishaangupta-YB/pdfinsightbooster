
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import { AlertCircle, ArrowRight, FileText, BarChart, Database } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Navbar } from "@/components/layout/Navbar";
import { Footer } from "@/components/layout/Footer";
import { PDFUploader } from "@/components/PDFUploader";
import { QueryInput } from "@/components/QueryInput";
import { SchemaDisplay } from "@/components/SchemaDisplay";
import { toast } from "sonner";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";

// Define the PDF file interface
interface PDFFile {
  id: string;
  name: string;
  size: number;
  file: File | string;
  type: 'file' | 'link';
  url?: string;
}

// Mock generated schema based on query
const generateMockSchema = (query: string) => {
  // This would normally be generated by Gemini in a real implementation
  return {
    type: "object",
    properties: {
      title: {
        type: "string",
        description: "The title of the document"
      },
      author: {
        type: "string",
        description: "The author of the document"
      },
      date: {
        type: "string",
        format: "date",
        description: "The publication date"
      },
      content: {
        type: "object",
        properties: {
          summary: {
            type: "string",
            description: "A summary of the document content"
          },
          keywords: {
            type: "array",
            items: {
              type: "string"
            },
            description: "Keywords from the document"
          }
        }
      }
    },
    required: ["title", "content"]
  };
};

// Mock generated data based on schema
const generateMockData = () => {
  return {
    title: "Sample Document",
    author: "John Doe",
    date: "2023-05-15",
    content: {
      summary: "This is a sample document to demonstrate the PDF extraction capabilities.",
      keywords: ["sample", "document", "extraction", "pdf"]
    }
  };
};

const Dashboard = () => {
  const [files, setFiles] = useState<PDFFile[]>([]);
  const [query, setQuery] = useState<string>("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [generatedSchema, setGeneratedSchema] = useState<any>(null);
  const [generatedData, setGeneratedData] = useState<any>(null);
  const navigate = useNavigate();

  // Reset state when component mounts
  useEffect(() => {
    sessionStorage.removeItem("pdf_extraction_schema");
    sessionStorage.removeItem("pdf_extraction_data");
  }, []);

  const handleFilesChange = (newFiles: PDFFile[]) => {
    setFiles(newFiles);
  };

  const handleQuerySubmit = (userQuery: string) => {
    setQuery(userQuery);
    
    if (files.length === 0) {
      toast.error("Please upload at least one PDF file first");
      return;
    }
     
    setIsProcessing(true);
    
    // Generate mock schema based on query
    setTimeout(() => {
      const schema = generateMockSchema(userQuery);
      setGeneratedSchema(schema);
      
      // Generate mock data based on schema
      setTimeout(() => {
        const data = generateMockData();
        setGeneratedData(data);
        
        // Store in session storage for results page
        sessionStorage.setItem("pdf_extraction_query", userQuery);
        sessionStorage.setItem("pdf_extraction_files", JSON.stringify(files));
        sessionStorage.setItem("pdf_extraction_schema", JSON.stringify(schema));
        sessionStorage.setItem("pdf_extraction_data", JSON.stringify(data));
        
        setIsProcessing(false);
        
        // Navigate to results page after schema and data are generated
        setTimeout(() => {
          navigate("/results");
        }, 1000);
      }, 1000);
    }, 1000);
  };

  return (
    <div className="min-h-screen flex flex-col bg-background">
      <Navbar />
      
      <main className="flex-1 container max-w-5xl px-4 pt-24 pb-16">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="space-y-2 mb-8"
        >
          <h1 className="text-3xl font-bold tracking-tight">PDF Insight Dashboard</h1>
          <p className="text-muted-foreground">
            Upload your PDF documents and define your extraction query
          </p>
        </motion.div>
        
        <div className="grid md:grid-cols-2 gap-8 items-start">
          {/* Left Column - File Upload */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <Card className="border shadow-sm backdrop-blur-sm">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="p-1.5 rounded-full bg-primary/10">
                      <FileText className="h-4 w-4 text-primary" />
                    </div>
                    <CardTitle>Upload Documents</CardTitle>
                  </div>
                  <span className="text-sm text-muted-foreground">Step 1 of 2</span>
                </div>
                <CardDescription>
                  Upload files or provide URLs to PDF documents
                </CardDescription>
              </CardHeader>
              <CardContent>
                <PDFUploader
                  files={files}
                  onFilesChange={handleFilesChange}
                  maxFiles={10}
                  maxSizeMB={20}
                /> 
                {files.length > 0 && (
                  <Alert variant="default" className="mt-4 bg-muted/50 border-muted">
                    <AlertCircle className="h-4 w-4 text-primary" />
                    <AlertDescription>
                      {files.length} {files.length === 1 ? "file" : "files"} ready for processing.
                    </AlertDescription>
                  </Alert>
                )}
              </CardContent>
            </Card>
          </motion.div>
          
          {/* Right Column - Query Input */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
          >
            <Card className="border shadow-sm backdrop-blur-sm">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="p-1.5 rounded-full bg-primary/10">
                      <Database className="h-4 w-4 text-primary" />
                    </div>
                    <CardTitle>Define Your Query</CardTitle>
                  </div>
                  <span className="text-sm text-muted-foreground">Step 2 of 2</span>
                </div>
                <CardDescription>
                  Describe what data you want to extract from the documents
                </CardDescription>
              </CardHeader>
              <CardContent>
                <QueryInput
                  onSubmit={handleQuerySubmit}
                  isProcessing={isProcessing}
                />
                
                <Alert variant="default" className="mt-4 bg-muted/50 border-muted">
                  <AlertCircle className="h-4 w-4 text-primary" />
                  <AlertDescription>
                    Be specific about what data you want to extract for best results.
                  </AlertDescription>
                </Alert>
              </CardContent>
            </Card>
          </motion.div>
        </div>
        
        {/* Schema and Generated Data Section */}
        {generatedSchema && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="mt-8"
          >
            <SchemaDisplay 
              schema={generatedSchema} 
              generatedData={generatedData}
            />
          </motion.div>
        )}
        
        {/* Stats Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.3 }}
          className="grid md:grid-cols-3 gap-4 mt-8"
        >
          <Card className="bg-primary/5 border shadow-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <FileText className="h-4 w-4" />
                Document Capacity
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{files.length} / 10</div>
              <p className="text-xs text-muted-foreground mt-1">PDF files added</p>
            </CardContent>
          </Card>
          
          <Card className="bg-muted/50 border shadow-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <Database className="h-4 w-4" />
                Processing Limit
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">20 MB</div>
              <p className="text-xs text-muted-foreground mt-1">Maximum file size</p>
            </CardContent>
          </Card>
          
          <Card className="bg-muted/50 border shadow-sm">
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <BarChart className="h-4 w-4" />
                Extraction Accuracy
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">95%</div>
              <p className="text-xs text-muted-foreground mt-1">With clear PDFs</p>
            </CardContent>
          </Card>
        </motion.div>
        
        {/* Bottom Button */}
        {/* <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
          className="mt-12 flex justify-center"
        >
          <Button
            size="lg"
            className="w-full max-w-md shadow-md hover:shadow-lg transition-all"
            disabled={files.length === 0 || !query || isProcessing}
            onClick={() => handleQuerySubmit(query)}
          >
            {isProcessing ? (
              <div className="flex items-center">
                <div className="h-4 w-4 border-t-2 border-r-2 border-current rounded-full animate-spin mr-2" />
                Processing...
              </div>
            ) : (
              <>
                Extract Data
                <ArrowRight className="ml-2 h-4 w-4" />
              </>
            )}
          </Button>
        </motion.div> */}
      </main>
      
      <Footer />
    </div>
  );
};

export default Dashboard;
